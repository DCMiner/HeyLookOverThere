import numpy as np
import matplotlib.pyplot as pt
import analysis_helpers as AH
import plot_helpers as PH
#import FunWithReadouts as FWR
#import gc
import os
import pdb
from importlib import reload

#gc.collect()
#params taken from runner
dat_path="data"
#stacks, format stack[ei,ie,n]
print("Loading...")
#rate_list_stack = []
n=5
ei=0.2
ie=0.2
delays=[0.000,0.001,0.002,0.003]
dists=[1,3,5,6]
trained_weight_stack = []
sequence_stack = []

print('loading control')
ctrl_rl = []
ctrl_tw = []
ctrl_st = []
for run_num in range(n):
    run_tag = "test_ei"+str(ei)+"_ie"+str(ie)+"ctrl"+"run"+str(run_num)
    print('loading run '+run_tag)
    rl_name = "rate_list"+run_tag+".npy"
    tw_name = "w_ee_final_"+run_tag+".npy"
    st_name = "spike_trains_"+run_tag+".npz.npy"
    rl_element = np.load(os.path.join(dat_path,rl_name),allow_pickle=True)
    tw_element = np.load(os.path.join(dat_path,tw_name),allow_pickle=True)
    st_element = np.load(os.path.join(dat_path,st_name),allow_pickle=True,encoding='bytes')
    ctrl_rl.append(rl_element)
    ctrl_tw.append(tw_element)
    ctrl_st.append(st_element)
ctrl_rl = np.array(ctrl_rl) #subpopulation rate list, control
ctrl_tw = np.array(ctrl_tw) #trained weights, control
ctrl_st = np.array(ctrl_st) #spike times, control
ctrl_peak_times, ctrl_peak_vals = AH.sequential_peak_readout(ctrl_rl) #peak times and peak values per trial, ctrl
rl_shape = np.shape(ctrl_rl)
tw_shape = np.shape(ctrl_tw)
times_vals_shape = np.shape(ctrl_peak_times)
print('control loaded')

#pdb.set_trace()

print('loading exp data')
exp_peak_times = np.zeros((np.shape(dists)[0],np.shape(delays)[0],times_vals_shape[0],times_vals_shape[1]))
exp_peak_vals = np.zeros((np.shape(dists)[0],np.shape(delays)[0],times_vals_shape[0],times_vals_shape[1]))
exp_tw = np.zeros((np.shape(dists)[0],np.shape(delays)[0],tw_shape[0],tw_shape[1],tw_shape[2]))
exp_st = []
for dist_num_index in range(np.size(dists)):
    dist_num = dists[dist_num_index]
    tmp_st_num = []
    for dist_delay_index in range(np.size(delays)):
        dist_delay = delays[dist_delay_index]
        tmp_rl = []
        tmp_tw = []
        tmp_st_del = []
        for run_num in range(n):
            run_tag = "test_ei"+str(ei)+"_ie"+str(ie)+"D"+str(dist_num)+"del"+str(dist_delay)+"run"+str(run_num)
            print('loading run '+run_tag)
            rl_name = "rate_list"+run_tag+".npy"
            tw_name = "w_ee_final_"+run_tag+".npy"
            st_name = "spike_trains_"+run_tag+".npz.npy"
            rl_element = np.load(os.path.join(dat_path,rl_name),allow_pickle=True)
            tw_element = np.load(os.path.join(dat_path,tw_name),allow_pickle=True)
            st_element = np.load(os.path.join(dat_path,st_name),allow_pickle=True,encoding='bytes')
            tmp_rl.append(rl_element)
            tmp_tw.append(tw_element)
            tmp_st_del.append(st_element)
        tmp_peak_times, tmp_peak_vals = AH.sequential_peak_readout(np.array(tmp_rl))
        exp_tw[dist_num_index,dist_delay_index] = np.array(tmp_tw) #trained weights, experimental
        exp_peak_vals[dist_num_index,dist_delay_index] = tmp_peak_vals #peak values per trial, experimental
        exp_peak_times[dist_num_index,dist_delay_index] = tmp_peak_times #peak times per trial, experimental
        tmp_st_num.append(tmp_st_del)
    exp_st.append(tmp_st_num) #spike times, experimental
print('exp data loaded')

#pdb.set_trace()

###FIGURES IN DISTRACTOR PAPER###
#figures 1, 2 generated in Powerpoint / Google Slides
#figure 3 generated with a manual zoom on the following, plus post-editing for colors:
PH.raster_plot_colorhack(ctrl_st[0])
#figure 4 generated with manual zooms on the following, plus post-editing for colors:
PH.raster_plot(ctrl_st[0],shuffle=True)
PH.raster_plot_colorhack(ctrl_st[0])
#figure 5 generated by several manual calls to with pt.imshow() to the weight matrix after
#...running a simulation interactively, using the "monasmat" helper function, with varying
#...times and colormaps. this is necessary as the runner only saves the final weight matrix
#figure 6 generated in Powerpoint / Google Slides
#figures 7, 8 generated with:
PH.rep_weights_hist(ctrl_tw)
#figure 9 generated with:
PH.ctrl_hist_vio(ctrl_peak_times)
#figures 10-17 generated with (plus post-editing for stimulus symbol):
PH.all_dist_vio_plots(exp_peak_times,exp_peak_vals,exp_st)
#figure 18 generates with (variances cropped for fianl figure):
dis_mns,dis_vrs = AH.scan_disruption(ctrl_peak_times,ctrl_peak_vals,exp_peak_times,exp_peak_vals)
dev_mns,dev_vrs = AH.scan_deviance(ctrl_peak_times,ctrl_peak_vals,exp_peak_times,exp_peak_vals)
PH.plot_dis_dev(dists,delays,dis_mns,dis_vrs,dev_mns,dev_vrs)

pdb.set_trace()
